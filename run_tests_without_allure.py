#!/usr/bin/env python3
"""
Script ch·∫°y test m√† kh√¥ng c·∫ßn Allure plugin ƒë·ªÉ tr√°nh l·ªói compatibility
"""

import os
import sys
import subprocess
import json
from datetime import datetime
from pathlib import Path

def run_tests_without_allure():
    """Ch·∫°y test m√† kh√¥ng c·∫ßn Allure plugin"""
    
    # T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt
    os.makedirs("allure-results", exist_ok=True)
    os.makedirs("screenshots", exist_ok=True)
    os.makedirs("logs", exist_ok=True)
    
    # Command ƒë·ªÉ ch·∫°y test m√† kh√¥ng c√≥ Allure plugin
    cmd = [
        "pytest",
        "tests/",
        "--html=report.html",
        "--self-contained-html",
        "--no-allure",  # Disable Allure plugin
        "-v",
        "--tb=short"
    ]
    
    print("üöÄ Ch·∫°y test m√† kh√¥ng c·∫ßn Allure plugin...")
    print(f"Command: {' '.join(cmd)}")
    
    try:
        # Ch·∫°y test
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        # In output
        if result.stdout:
            print("=== STDOUT ===")
            print(result.stdout)
        
        if result.stderr:
            print("=== STDERR ===")
            print(result.stderr)
        
        print(f"Exit code: {result.returncode}")
        
        # T·∫°o file k·∫øt qu·∫£ ƒë∆°n gi·∫£n cho Allure
        if result.returncode == 0:
            create_simple_allure_results()
        
        return result.returncode == 0
        
    except Exception as e:
        print(f"‚ùå L·ªói khi ch·∫°y test: {e}")
        return False

def create_simple_allure_results():
    """T·∫°o file k·∫øt qu·∫£ ƒë∆°n gi·∫£n cho Allure"""
    
    # T·∫°o file environment.json
    environment_data = {
        "browser": "chromium",
        "base_url": "https://www.saucedemo.com/",
        "environment": "test",
        "timestamp": datetime.now().isoformat()
    }
    
    env_file = Path("allure-results") / "environment.json"
    with open(env_file, 'w') as f:
        json.dump(environment_data, f, indent=2)
    
    print(f"‚úÖ ƒê√£ t·∫°o file environment: {env_file}")

def generate_allure_report():
    """Generate Allure report t·ª´ k·∫øt qu·∫£ ƒë√£ c√≥"""
    
    print("üìä Generate Allure report...")
    
    # Ki·ªÉm tra xem c√≥ Allure CLI kh√¥ng
    try:
        result = subprocess.run(["allure", "--version"], capture_output=True, text=True)
        if result.returncode == 0:
            # D√πng Allure CLI
            cmd = ["allure", "generate", "allure-results", "--clean", "-o", "allure-report"]
            subprocess.run(cmd, check=True)
            print("‚úÖ Allure report ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
            return True
    except (FileNotFoundError, subprocess.CalledProcessError):
        pass
    
    # Th·ª≠ d√πng allure_runner.py
    try:
        cmd = ["python", "allure_runner.py", "generate", "allure-results", "allure-report"]
        subprocess.run(cmd, check=True)
        print("‚úÖ Allure report ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v·ªõi allure_runner.py!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå L·ªói khi generate Allure report: {e}")
        return False

def open_allure_report():
    """M·ªü Allure report"""
    
    print("üåê M·ªü Allure report...")
    
    # Th·ª≠ d√πng allure_runner.py
    try:
        cmd = ["python", "open_allure_report.py", "auto"]
        subprocess.run(cmd)
        return True
    except Exception as e:
        print(f"‚ùå L·ªói khi m·ªü Allure report: {e}")
        return False

def main():
    """Main function"""
    print("üéØ Test Runner - Kh√¥ng c·∫ßn Allure Plugin")
    print("=" * 50)
    
    # Ch·∫°y test
    success = run_tests_without_allure()
    
    if success:
        print("\n‚úÖ Test ch·∫°y th√†nh c√¥ng!")
        
        # Generate Allure report
        if generate_allure_report():
            # M·ªü report
            open_allure_report()
    else:
        print("\n‚ùå Test th·∫•t b·∫°i!")
        sys.exit(1)

if __name__ == "__main__":
    main() 